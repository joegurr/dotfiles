#!/usr/bin/env python3

import sys
import subprocess

def main(commit_msg_file):
    # Ensure the commit message ends with a newline
    with open(commit_msg_file, 'r+') as f:
        f.seek(0, 2)  # Move to the end of the file
        f.seek(f.tell() - 1, 0)  # Move back one character from the end
        last_char = f.read(1)
        if last_char != '\n':
            f.write('\n')

    # Run commitlint to check the commit message
    result = subprocess.run(['commitlint', '-e', commit_msg_file])

    if result.returncode != 0:
        print("Commit message did not pass commitlint rules.")
        sys.exit(1)

    # Check if the commit is signed
    author_ident = subprocess.run(['git', 'var', 'GIT_AUTHOR_IDENT'], capture_output=True, text=True).stdout.strip()

    # gives format A B <C@D> E F, we don't want E and F
    author_ident = author_ident.split('>')[0] + '>'

    signed_off_by = f'Signed-off-by: {author_ident}'

    with open(commit_msg_file, 'r+') as f:
        content = f.read()
        if signed_off_by not in content:
            f.write(f'{signed_off_by}\n')


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: pre-commit <commit-msg-file>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1])
